import matplotlib
import matplotlib.pyplot as plt
import numpy as np
from scipy.interpolate import make_interp_spline

matplotlib.rc("font", family='YouYuan')


# 曲线拟合函数
def quxiannihehanshu1(x, y):
    p = np.polyfit(x, y, 2)
    x_fit = np.linspace(min(x), max(x), 100)
    y_fit = np.polyval(p, x_fit)
    return x_fit, y_fit


'''lxsh
y_Pb = np.array(
    [407.3, 404.2, 401.1, 397.9, 394.3, 390.6, 386.8, 382.7, 378.6, 374.4, 370.2, 366.0, 362.0, 357.8, 353.7, 349.7,
     345.8, 341.6,
     337.8, 334.2, 330.3, 327.0, 324.7, 324.1, 323.8, 323.5, 323.2, 323.0, 322.8, 322.5, 322.2, 321.9, 321.7, 321.4,
     320.7, 320.1,
     318.6, 315.2, 309.7, 304, 298.4, 293.4, 288.7, 284.0, 279.9, 275.7, 271.9])  # 纯铅ystart_value = 0
end_value = 20 * (len(y_Pb) - 1)
start_value = 0
x_Pb = np.arange(start_value, end_value + 1, 20)

# 30%Sn
y_30 = np.array(
    [337.3, 329.8, 322.8, 316.2, 309.9, 304.1, 298.4, 293.3, 288.3, 283.5, 279.2, 275, 271, 267.2, 263.8, 260.8,
     257.9, 255.5, 253.3, 251.3, 249.5, 247.8, 246.1, 244.5, 242.9, 241.3, 239.7, 238.1, 236.5, 234.9, 233.4, 231.8,
     230.2, 228.6, 227.0, 225.5, 224.0, 222.4, 221.0, 219.5, 218.1, 216.7, 215.3, 213.9, 212.4, 210.9, 209.4, 207.9,
     206.4, 204.9, 203.4, 202.0, 200.5, 199.0, 197.6, 196.1, 194.7, 193.3, 191.9, 190.5, 189.1, 187.8, 186.6, 185.4,
     184.3, 183.6, 183.4, 183.5, 183.5, 183.5, 183.5, 183.5, 183.4, 183.4, 183.3, 183.3, 183.3, 183.3, 183.1, 183.1,
     183.0, 182.9, 182.8, 182.5, 182.3, 182.0, 181.6, 181.1, 180.3, 178.8, 176.2, 173.3, 170.4, 167.6, 161.9, 159.2
     ])  # 30%Sny
start_value = end_value + 50
end_value = start_value + 20 * (len(y_30) - 1)
x_30 = np.arange(start_value, end_value + 1, 20)

# 61.9%
y_619 = np.array(
    [287.0, 281.1, 266.8, 259.9, 253.3, 247.2, 241.3, 236.5, 231.7, 227.3, 223.1, 219.2, 215.5, 211.9, 208.3, 205.1,
     202.2, 200.2, 198.5, 197.0, 195.6, 194.2, 192.9, 191.6, 190.5, 189.3, 188.1, 187.0, 186.0, 184.9, 183.8, 182.8,
     181.8,
     180.8, 180.4,
     180.7, 181.0, 181.1, 181.2, 181.3, 181.3, 181.3, 181.2, 181.2, 181.2, 181.2, 181.1, 181.1, 181.0, 181.0, 180.9,
     180.8, 180.7, 180.5, 180.1, 179.6, 178.9, 176.3, 173.1, 169.6, 166.1, 162.7, 159.4, 156.2, 153.1, 150.1])  # 61.9%y
start_value = end_value + 50
end_value = start_value + 20 * (len(y_619) - 1)
x_619 = np.arange(start_value, end_value + 1, 20)

# 80%
y_80 = np.array(
    [249.8, 243.1, 236.7, 230.9, 225.3, 219.9, 214.7, 210.0, 200.0, 196.6, 192.8, 194.3, 197.9, 199.5, 199.8,
     199.7, 199.1, 198.4, 197.5, 196.6, 195.5, 194.4, 193.2, 191.9, 190.7, 189.3, 187.9, 186.4,
     185.0, 183.5, 182.3, 181.8, 181.6, 181.5, 181.5, 181.5, 181.4, 181.2, 181.0, 180.8, 180.3, 179.3, 178.3, 176.6,
     173.4, 169.3, 165.4, 161.6, 157.9, 154.3])  # 80%y
start_value = end_value + 50
end_value = start_value + 20 * (len(y_80) - 1)
x_80 = np.arange(start_value, end_value + 1, 20)

# 纯Sn
y_Sn = np.array(
    [300.5, 288.5, 276.5, 265.9, 256.2, 247.2, 239.2, 233.6, 231.8, 230.9, 230.5, 230.3, 230.1, 229.9, 229.8,
     229.7, 229.6, 229.5, 229.5, 229.3, 229.2, 229.0, 228.7, 228.4, 228.0, 227.4, 226.8, 225.7, 224.1, 214.5,
     208.4, 202.3, 196.1, 190.1, 184.7, 179.5, 174.6, 169.8])  # 纯Sny
start_value = end_value + 50
end_value = start_value + 20 * (len(y_Sn) - 1)
x_Sn = np.arange(start_value, end_value + 1, 20)

# 绘制相图所需数据
# 依次输入纯铅、30%锡、61.9%锡、80%锡、纯锡的拐点温度
a1 = 322.7
a2 = 260.8
a3 = 182
a4 = 199.8
a5 = 229.5

# 依次输入纯铅、30%锡、61.9%锡、80%锡、纯锡的拐点温度横坐标
c1 = 556
c2 = 1270
c3 = 2469
c4 = 4553
c5 = 5641
'''
'''dst
y_Pb = np.array(
    [407.2, 406.4, 404.5, 401.4, 397.9, 393.9, 389.7, 385.2, 380.6, 376.0, 371.3, 361.8, 357.4, 352.9, 348.3, 343.9,
     339.5, 335.2, 331.6,
     329.1, 328.3, 327.9, 327.9, 327.8, 327.6, 327.5, 327.4, 327.1, 326.9, 326.5, 325.9, 325.2, 324.1, 321.9, 316.7,
     310.9, 304.8, 299.2,
     293.8, 288.7])  # 纯铅ystart_value = 0
end_value = 20 * (len(y_Pb) - 1)
start_value = 0
x_Pb = np.arange(start_value, end_value + 1, 20)

# 30%Sn
y_30 = np.array(
    [332.2, 325.6, 318.7, 312.0, 305.6, 299.4, 293.6, 288.0, 282.9, 277.9, 273.3, 268.9, 265.0, 261.4, 258.4, 255.7,
     253.2, 251.0, 248.9, 247.0, 245.0, 243.2, 241.4, 239.7, 236.1, 234.3, 232.6, 230.8, 229.0, 227.3, 225.5, 223.9,
     222.1, 220.4, 218.9, 217.2, 215.6, 214.0, 212.3, 210.6, 208.9, 207.2, 205.4, 203.8, 202.1, 200.4, 198.8, 197.2,
     195.5, 193.9, 192.3, 190.6, 189.1, 187.8, 186.4, 185.3, 184.8, 184.7, 184.7, 184.6, 184.6, 184.4, 184.3, 184.2,
     184.1, 183.9, 183.7, 183.4, 183.0, 182.4, 181.7, 180.8, 179.5, 177.1, 173.5, 170.2, 167.5, 165.0, 162.9
     ])  # 30%Sny
start_value = end_value + 50
end_value = start_value + 20 * (len(y_30) - 1)
x_30 = np.arange(start_value, end_value + 1, 20)

# 61.9%
y_619 = np.array(
    [243.2, 239.3, 234.9, 230.5, 226.2, 222.3, 218.4, 214.7, 211.1, 207.8, 205.3, 203.2, 201.5, 199.8, 198.4, 197.1,
     195.9, 194.8, 193.8, 192.7, 191.7, 190.7, 189.6, 188.6, 187.6, 186.6, 185.8, 185.0, 184.2, 183.5, 183.1, 183.0,
     182.9, 182.8, 182.8, 182.7, 182.5, 182.5, 182.3, 182.1, 181.8, 181.6, 181.2, 180.9, 180.3, 179.6, 177.7, 174.2,
     165.8, 162.5, 159.6, 157.0, 154.7, 152.4, 150.3, 148.4])  # 61.9%y
start_value = end_value + 50
end_value = start_value + 20 * (len(y_619) - 1)
x_619 = np.arange(start_value, end_value + 1, 20)

# 80%
y_80 = np.array(
    [258.6, 252.2, 246.0, 240.1, 234.3, 229.1, 224.1, 219.3, 214.7, 210.2, 206.5, 204.9, 204.1, 203.4, 202.6, 201.7,
     200.9, 199.8, 198.8, 197.6, 196.3, 194.9, 193.4, 191.7, 189.9, 188.2, 186.6, 185.1, 184.0, 183.5, 183.3, 183.2,
     183.1, 183.1, 183.0, 182.8, 182.4, 181.7, 180.8, 179.6, 177.4, 173.9, 170.1, 166.9, 164.0, 161.2, 158.6, 156.0,
     153.6, 151.3, 149.0])  # 80%y
start_value = end_value + 50
end_value = start_value + 20 * (len(y_80) - 1)
x_80 = np.arange(start_value, end_value + 1, 20)

# 纯Sn
y_Sn = np.array(
    [329.0, 319.8, 309.0, 298.9, 288.7, 278.7, 269.9, 261.6, 253.9, 246.7, 239.7, 233.3, 230.7, 231.8, 232.1, 232.2,
     232.2, 232.1, 232.1, 232.0, 231.9, 231.8, 231.5, 231.2, 230.8, 230.1, 229.0, 227.4, 225.0, 220.5, 215.4, 210.2,
     205.1, 200.4, 195.7, 191.3, 187.4, 183.4, 179.5, 176.0, 172.6])  # 纯Sny
start_value = end_value + 50
end_value = start_value + 20 * (len(y_Sn) - 1)
x_Sn = np.arange(start_value, end_value + 1, 20)

# 绘制相图所需数据
# 依次输入纯铅、30%锡、61.9%锡、80%锡、纯锡的拐点温度
a1 = 327.6
a2 = 265.0
a3 = 183.2
a4 = 206.5
a5 = 231.8

# 依次输入纯铅、30%锡、61.9%锡、80%锡、纯锡的拐点温度横坐标
c1 = 470
c2 = 1070
c3 = 2070
c4 = 3790
c5 = 5020'''

'''# 绘制步冷曲线的数据
# Pb
y_Pb = np.array(
    [394.8, 393.0, 391.4, 389.9, 388.5, 386.8, 384.7, 382.1, 379.4 ,376.3,  373.4 ,  370.2 ,
     366.8 ,  363.3, 359.8 ,  356.2 ,  352.7 ,  349.1 ,  345.5 ,  341.9 ,  338.4 ,  335.4 ,
     333.2 ,  331.7 ,  330.5 ,  329.6 ,  329.0 ,  328.4 ,  328.0 , 327.7 ,  327.3 ,  326.4 ,
     325.8 ,  325.0 ,  324.0 ,  322.6 ,  320.5 ,  318.0 ,  315.3 ,  312.0 ,  307.8 ,  303.2 ,
     298.5 , 293.7 ,  289.1 ,  284.8 ,  280.7])  # 纯铅ystart_value = 0
end_value = 20 * (len(y_Pb) - 1)
start_value = 0
x_Pb = np.arange(start_value, end_value + 1, 20)

# 30%Sn
y_30 = np.array(
    [312.2, 305.0, 298.5, 292.4, 286.5, 281.4, 276.3, 271.6, 267.7, 264.7, 262.5, 261.2, 260.4,
     259.3, 258.1, 256.7, 255.1, 253.6, 252.0, 250.3, 248.6, 246.8, 245.0, 243.1, 241.2, 239.3, 237.4,
     235.4, 233.4, 231.4, 229.4, 227.4, 225.3, 223.4, 221.3, 219.3, 217.3, 215.4, 213.5, 211.5,
     209.6, 207.7, 205.9, 204.0, 202.3, 200.5, 198.8, 197.1, 195.5, 193.8, 192.2, 190.6, 189.0,
     187.5, 186.0, 184.6, 183.1, 181.7, 180.3, 179.0, 181.0, 181.7, 182.0, 182.1, 182.0, 181.9,
     181.7, 181.5, 181.1, 180.7, 178.7, 176.7, 174.7, 172.7, 170.8, 168.8, 164.9, 163.1, 161.3,
     159.7, 158.2, 156.7, 155.3, 153.9, 152.6, 151.4, 150.2, 149.2
     ])  # 30%Sny
start_value = end_value + 50
end_value = start_value + 20 * (len(y_30) - 1)
x_30 = np.arange(start_value, end_value + 1, 20)

# 61.9%
y_619 = np.array(
    [239.1, 234.2, 230.0, 225.3, 220.9, 216.8, 212.8, 209.2, 205.4, 202.0, 198.6, 195.4, 192.4, 189.8, 188.4, 187.6,
     186.8, 184.7, 181.9, 179.9, 181.5, 182.4, 182.4, 182.1, 181.6, 181.1, 181.1, 180.6, 180.0, 179.2, 178.4, 177.5,
     176.5, 175.1, 173.9, 173.1, 170.8, 167.5, 164.3, 161.0, 158.0, 155.0, 152.3])  # 61.9%y
start_value = end_value + 50
end_value = start_value + 20 * (len(y_619) - 1)
x_619 = np.arange(start_value, end_value + 1, 20)

# 80%
y_80 = np.array(
    [238.5, 231.0, 224.1, 217.4, 211.9, 208.1, 205.6, 203.1, 200.8, 198.7, 197.0, 195.5, 194.0, 192.6, 191.1, 189.4,
     188.0, 186.8, 185.5, 184.1, 183.1, 182.8, 182.5, 182.3, 182.1, 181.8, 181.5, 181.1, 180.8, 180.3, 179.7, 178.7,
     176.9, 173.0, 168.8, 165.0, 161.4, 158.2, 155.0, 152.2, 149.4])  # 80%y
start_value = end_value + 50
end_value = start_value + 20 * (len(y_80) - 1)
x_80 = np.arange(start_value, end_value + 1, 20)

# 纯Sn
y_Sn = np.array(
    [304.5, 288.4, 273.1, 259.4, 247.6, 236.8, 226.9, 229.3, 230.9, 231.2, 231.2, 231.0, 230.9, 230.6, 230.3, 229.8,
     228.8, 227.0, 220.2, 211.2, 202.9, 195.1, 188.2, 181.7, 175.6, 170.2, 165.2])  # 纯Sny
start_value = end_value + 50
end_value = start_value + 20 * (len(y_Sn) - 1)
x_Sn = np.arange(start_value, end_value + 1, 20)

# 绘制相图所需数据
# 依次输入纯铅、30%锡、61.9%锡、80%锡、纯锡的拐点温度
a1 = 327.7
a2 = 262.5
a3 = 181.7
a4 = 208.1
a5 = 230.7

# 依次输入纯铅、30%锡、61.9%锡、80%锡、纯锡的拐点温度横坐标
c1 = 480
c2 = 1170
c3 = 2170
c4 = 3750
c5 = 4660
'''
'''# 绘制步冷曲线的数据
# Pb
y_Pb = np.array(
    [400.1, 397.0, 393.0, 388.9, 384.3, 379.2, 374.8, 370.7, 366.6, 362.2, 358.1, 354.0, 349.9,
     348.6, 341.9, 338.0, 334.2, 331.0, 328.4, 327.0, 326.2, 325.6, 325.0, 324.6, 324.2, 323.7,
     323.3, 322.8, 322.3, 321.9, 321.5, 321.0, 320.5, 319.7, 313.5, 308.4, 303.4, 298.3, 293.5,
     289.0, 284.4, 280.3, 276.2, 272.4, 268.8])  # 纯铅ystart_value = 0
end_value = 20 * (len(y_Pb) - 1)
start_value = 0
x_Pb = np.arange(start_value, end_value + 1, 20)

# 30%Sn
y_30 = np.array(
    [318.3, 311.5, 304.8, 298.5, 292.7, 287.3, 282.1, 274.5, 273.1, 269.1, 265.5, 262.7, 260.0, 257.5, 255.2,
     253.0, 251.0, 249.1, 247.2, 245.3, 243.4, 241.6, 239.7, 238.0, 236.2, 234.4, 232.6, 230.9, 229.2, 227.4,
     225.7, 224.0, 222.3, 220.7, 219.1, 217.4, 216.0, 214.4, 212.9, 211.3, 209.8, 208.2, 206.6, 205.1, 203.5,
     201.9, 200.4, 198.9, 197.3, 195.8, 194.4, 192.9, 191.4, 190.0, 188.6, 187.3, 186.3, 185.7, 185.7, 185.7,
     185.7, 185.7, 185.7, 185.7, 185.6, 185.5, 185.3, 185.0, 184.7, 184.2, 183.5, 182.8, 181.9, 180.8, 179.8,
     178.3, 176.0, 172.0, 168.8, 164.7, 161.5, 158.6, 155.7, 153.2, 150.7
     ])  # 30%Sny
start_value = end_value + 50
end_value = start_value + 20 * (len(y_30) - 1)
x_30 = np.arange(start_value, end_value + 1, 20)

# 61.9%
y_619 = np.array(
    [247.4, 244.2, 238.8, 233.5, 228.1, 223.1, 218.5, 214.2, 210.1, 206.2, 202.9, 200.1, 197.9, 196.1, 194.4,
     192.8, 191.3, 189.9, 188.6, 187.3, 186.1, 185.2, 184.6, 184.1, 183.5, 183.1, 183.1, 183.1, 183.1, 183.1,
     183.1, 183.1, 183.0, 182.9, 182.9, 182.8, 182.8, 182.7, 182.6, 182.5, 182.3, 182.1, 181.7, 181.2, 180.7,
     180.0, 178.0, 173.6, 168.6, 164.9, 161.2, 157.7, 154.5, 151.4])  # 61.9%y
start_value = end_value + 50
end_value = start_value + 20 * (len(y_619) - 1)
x_619 = np.arange(start_value, end_value + 1, 20)

# 80%
y_80 = np.array(
    [250.4, 243.9, 237.4, 231.0, 225.2, 219.3, 214.1, 209.0, 206.8, 206.7, 207.2, 206.7, 205.9, 204.9, 203.9,
     202.7, 201.3, 199.8, 198.3, 196.6, 194.7, 192.9, 190.8, 188.7, 186.7, 184.8, 183.6, 183.1, 182.9, 182.7,
     182.6, 182.4, 182.2, 181.8, 181.5, 181.0, 180.4, 179.8, 179.1, 177.9, 175.7, 172.7, 169.3, 166.1, 162.1,
     159.5, 156.4, 153.5])  # 80%y
start_value = end_value + 50
end_value = start_value + 20 * (len(y_80) - 1)
x_80 = np.arange(start_value, end_value + 1, 20)

# 纯Sn
y_Sn = np.array(
    [298.6, 289.2, 279.5, 270.4, 261.6, 253.4, 245.9, 238.6, 232.6, 232.3, 232.1, 231.9, 231.9,
     231.8, 231.7, 231.6, 231.5, 231.5, 231.4, 231.3, 231.2, 231.0, 230.8, 230.3, 229.7, 228.7,
     227.4, 223.2, 216.7, 210.0, 203.7, 198.0, 192.5, 187.4, 182.5, 177.9, 173.6])  # 纯Sny
start_value = end_value + 50
end_value = start_value + 20 * (len(y_Sn) - 1)
x_Sn = np.arange(start_value, end_value + 1, 20)

# 绘制相图所需数据
# 依次输入纯铅、30%锡、61.9%锡、80%锡、纯锡的拐点温度
a1 = 325.3
a2 = 273.1
a3 = 183.1
a4 = 206.8
a5 = 231.9

# 依次输入纯铅、30%锡、61.9%锡、80%锡、纯锡的拐点温度横坐标
c1 = 400
c2 = 1090
c3 = 2070
c4 = 3930
c5 = 4940'''
# 绘制步冷曲线的数据
# Pb
y_Pb = np.array(
    [386.5,383.4,379.9,376.1,372.2,368.2,364.0,359.8,355.5,351.2,347.1,342.9,338.7,334.6,330.5,326.7,324.8,324.0,323.5,
     323.2,322.8,322.4,322.0,321.8,321.4,321.2,320.8,320.5,320.1,319.4,318.5,316.4,311.5,305.5,299.6,294.0,288.6,283.7,
     278.9,274.4])  # 纯铅
end_value = 20 * (len(y_Pb) - 1)
start_value = 0
x_Pb = np.arange(start_value, end_value + 1, 20)

# 30%Sn
y_30 = np.array(
    [331.6,324.7,316.7,309.0,302.0,295.6,289.5,283.6,278.3,268.6,264.4,260.8,257.6,254.8,252.4,248.6,246.9,245.1,243.4,
     241.6,239.8,238.1,236.3,234.6,232.5,231.0,229.3,227.6,225.7,224.0,222.3,220.3,218.5,216.7,214.8,212.9,211.1,209.3,
     207.4,205.6,203.8,202.1,200.3,198.6,197.0,195.2,193.6,191.9,190.3,188.7,187.1,185.5,184.1,183.4,183.3,183.4,183.4,
     183.4,183.4,183.4,183.3,183.3,183.3,183.3,183.2,183.1,183.0,182.9,182.6,182.4,182.1,181.7,181.1,180.3,179.0,176.3,
     173.0,169.6,166.4,163.3
     ])  # 30%Sny
start_value = end_value + 50
end_value = start_value + 20 * (len(y_30) - 1)
x_30 = np.arange(start_value, end_value + 1, 20)

# 61.9%
y_619 = np.array(
    [235.8,232.9,228.6,223.8,219.2,214.8,210.7,206.3,203.1,200.3,198.2,196.3,194.5,193.0,191.3,189.8,188.2,186.7,185.1,
     183.4,182.2,181.1,181.2,181.3,181.4,181.5,181.5,181.5,181.5,181.5,181.4,181.4,181.3,181.2,181.0,180.5,180.2,179.8,
     179.4,179.0,178.3,175.5,171.1,166.7,162.7,159.0,155.2,152.0])  # 61.9%y
start_value = end_value + 50
end_value = start_value + 20 * (len(y_619) - 1)
x_619 = np.arange(start_value, end_value + 1, 20)

# 80%
y_80 = np.array(
    [245.7,238.7,231.6,225.0,218.7,212.7,209.4,207.7,206.6,205.7,204.8,203.9,202.9,202.0,200.8,199.7,198.4,197.1,195.6,
     194.1,192.4,190.8,189.0,187.3,185.4,183.6,182.4,182.2,182.1,182.1,182.1,182.1,182.1,182.1,182.0,181.6,181.2,180.7,
     179.4,178.2,177.0,175.5,172.7,169.6,164.7,160.9,156.7,153.9])  # 80%y
start_value = end_value + 50
end_value = start_value + 20 * (len(y_80) - 1)
x_80 = np.arange(start_value, end_value + 1, 20)

# 纯Sn
y_Sn = np.array(
    [301.2,286.1,274.5,264.1,255.1,246.9,239.0,232.2,231.4,231.1,230.9,230.7,230.5,230.4,230.3,230.2,230.1,230.3,229.9,
     229.8,229.6,229.4,229.2,228.7,228.1,221.1,224.6,218.6,211.6,205.4,199.1,193.6,188.0,183.0,178.1,173.6])  # 纯Sny
start_value = end_value + 50
end_value = start_value + 20 * (len(y_Sn) - 1)
x_Sn = np.arange(start_value, end_value + 1, 20)

# 绘制相图所需数据
# 依次输入纯铅、30%锡、61.9%锡、80%锡、纯锡的拐点温度
a1 = 324.8
a2 = 248.6
a3 = 182.4
a4 = 209.4
a5 = 232.2

# 依次输入纯铅、30%锡、61.9%锡、80%锡、纯锡的拐点温度横坐标
c1 = 320
c2 = 1130
c3 = 2070
c4 = 3570
c5 = 4580

# 依次输入样品质量分数
b1 = 0.00
b2 = 30
b3 = 61.9
b4 = 80
b5 = 100
x_left = np.array([0.00, 30, 61.9])
y_left = np.array([a1, a2, a3])
x_right = np.array([61.9, 80, 100])
y_right = np.array([a3, a4, a5])
x_tpl = np.array([19.7, 97.4])
y_tpl = np.array([a3, a3])

# 画虚线

x_pb_pingtai = [c1, end_value+1000]
y_pb_pingtai = [a1, a1]
x_30_guaidian = [c2, end_value+1000]
y_30_guaidian = [a2, a2]
x_619_pingtai = [c3, end_value+1000]
y_619_pingtai = [a3, a3]
x_80_guaidian = [c4, end_value+1000]
y_80_guaidian = [a4, a4]
x_sn_pingtai = [c5, end_value+1000]
y_sn_pingtai = [a5, a5]

x_30_ax2_guaidain = [0, 30]
y_30_ax2_guaidain = y_30_guaidian
x_619_ax2_pingtai = [0, 19.7]
y_619_ax2_pingtai = y_619_pingtai
x_80_ax2_guaidain = [0, 80]
y_80_ax2_guaidain = y_80_guaidian
x_sn_ax2_pingtai = [0, 100]
y_sn_ax2_pingtai = y_sn_pingtai

x_pb_xian = np.linspace(x_Pb.min(), x_Pb.max(), 500)
f = make_interp_spline(x_Pb, y_Pb)
y_pb_xian = f(x_pb_xian)
# 曲线拟合
x_left_nihe, y_left_nihe = quxiannihehanshu1(x_left, y_left)
x_right_nihe, y_right_nihe = quxiannihehanshu1(x_right, y_right)

# 提取x和y中对应索引的数据30%
x_30_xian = np.linspace(x_30.min(), x_30.max(), 500)
f = make_interp_spline(x_30, y_30)
y_30_xian = f(x_30_xian)

# 提取x和y中对应索引的数据61.9%
x_619_xian = np.linspace(x_619.min(), x_619.max(), 500)
f = make_interp_spline(x_619, y_619)
y_619_xian = f(x_619_xian)

# 提取x和y中对应索引的数据80%
x_80_xian = np.linspace(x_80.min(), x_80.max(), 500)
f = make_interp_spline(x_80, y_80)
y_80_xian = f(x_80_xian)

# 提取x和y中对应索引的数据Sn
x_sn_xian = np.linspace(x_Sn.min(), x_Sn.max(), 500)
f = make_interp_spline(x_Sn, y_Sn)
y_sn_xian = f(x_sn_xian)
# 图绘制区

fig, (ax1, ax2) = plt.subplots(nrows=1, ncols=2, gridspec_kw={'hspace': 0.5})

# 步冷曲线图绘制区
# Pb线
ax1.plot(x_pb_xian, y_pb_xian, color='blue', label='Pb')

ax1.scatter(x_Pb, y_Pb, color='blue', s=2)

# 30%线
ax1.plot(x_30_xian, y_30_xian, color='cyan', label='30%Sn')

ax1.scatter(x_30, y_30, color='cyan', s=2)

# 61.9%线
ax1.plot(x_619_xian, y_619_xian, color='green', label='61.9%Sn')
ax1.scatter(x_619, y_619, color='green', s=2)

# 80%线
ax1.plot(x_80_xian, y_80_xian, color='orange', label='80%Sn')

ax1.scatter(x_80, y_80, color='orange', s=2)

# Sn线
ax1.plot(x_sn_xian, y_sn_xian, color='purple', label='Sn')

ax1.scatter(x_Sn, y_Sn, color='purple', s=2)

# 设置标题和轴标签
ax1.set_title('图1 Pb-Sn系统步冷曲线')
ax1.set_xlabel('t/s')
ax1.set_ylabel('T/℃')

'''ax1.set_xticks(np.arange(min(x), max(x) + 1, 1))'''
# ax1.set_yticks(np.arange(150, 360, 25))
ax1.grid(True)  # 显示网格线
ax1.spines['right'].set_visible(False)
ax1.legend()  # 添加图例

# 相图绘图区
ax2.plot(x_left_nihe, y_left_nihe)
ax2.plot(x_right_nihe, y_right_nihe)
ax2.scatter(x_left, y_left)
ax2.scatter(x_right, y_right)
ax2.plot(x_tpl, y_tpl)
ax2.set_title('图2 Pb-Sn系统相图')
ax2.set_xlabel('w(Sn%)')
ax2.set_ylabel('T/℃')
ax2.set_yticks(np.arange(100, 360, 10))

# 强制设定轴长度
ylim_min, ylim_max = 100, 360  # y轴的范围，假设这个范围可以覆盖两个函数的最大最小值
ax1.set_ylim(ylim_min, ylim_max)
ax2.set_ylim(ylim_min, ylim_max)
ax2.set_xlim(0, 100)
ax1.set_xlim(0, end_value+500)

# 绘点区
ax2.text(52, 275, 'l')
ax2.text(4, 191, 'α')
ax2.text(49, 145, 'α+β')
ax2.text(32, 200, 'α+l')
ax2.text(84, 194, 'β+l')
ax2.text(98, 180, 'β')

# 设置两个子图的x轴和y轴刻度相同
ax3 = ax2.twinx()
ax3.set_ylim(ylim_min, ylim_max + 0.5, 10)
ax2.set_yticklabels([])  # 不显示左轴刻度
yticks = np.arange(ylim_min, ylim_max + 0.5, 10)  # y轴的分度
ax1.set_yticks(yticks)
ax2.set_yticks(yticks)
ax2.grid(True)
plt.subplots_adjust(wspace=-0.01)  # 调整子图之间的宽度和高度间距
ax3.set_yticks(yticks)

# 画横虚线
ax1.plot(x_pb_pingtai, y_pb_pingtai, linestyle='dashed', color='red')
ax1.plot(x_30_guaidian, y_30_guaidian, linestyle='dashed', color='red')
ax1.plot(x_619_pingtai, y_619_pingtai, linestyle='dashed', color='red')
ax1.plot(x_80_guaidian, y_80_guaidian, linestyle='dashed', color='red')
ax1.plot(x_sn_pingtai, y_sn_pingtai, linestyle='dashed', color='red')
ax2.plot(x_30_ax2_guaidain, y_30_ax2_guaidain, linestyle='dashed', color='red')
ax2.plot(x_619_ax2_pingtai, y_619_ax2_pingtai, linestyle='dashed', color='red')
ax2.plot(x_80_ax2_guaidain, y_80_ax2_guaidain, linestyle='dashed', color='red')
ax2.plot(x_sn_ax2_pingtai, y_sn_ax2_pingtai, linestyle='dashed', color='red')

# 画斜虚线
x_1 = [b1, 19.7]
y_1 = [a1, a3]
x_2 = [19.7, 0]
y_2 = [a3, 0]
x_3 = [b5, 97.3]
y_3 = [a5, a3]
x_4 = [97.3, b5]
y_4 = [a3, 110]
ax2.plot(x_1, y_1, linestyle='dashed', color='black')
ax2.plot(x_2, y_2, linestyle='dashed', color='black')
ax2.plot(x_3, y_3, linestyle='dashed', color='black')
ax2.plot(x_4, y_4, linestyle='dashed', color='black')

# 画竖虚线
x_6 = [30, 30]
y_6 = [a2, 0]
x_7 = [80, 80]
y_7 = [a4, 0]
x_8 = [61.9, 61.9]
y_8 = [a3, 0]
ax2.plot(x_6, y_6, linestyle='dashed', color='red')
ax2.plot(x_7, y_7, linestyle='dashed', color='red')
ax2.plot(x_8, y_8, linestyle='dashed', color='red')
'''
y_xiangdian=[a1,a2,a3,a4,a5]
x_xiangdian=[b1,b2,b3,b4,b5]
for i in range(len([a1,a2,a3,a4,a5])):
    plt.text(x_xiangdian[i], y_xiangdian[i], f'({x_xiangdian[i]},{y_xiangdian[i]})')
'''
'''
x_ticks = [0, 20,30, 40, 60, 61.9,80, 100]  # 你想要显示的x轴刻度位置
x_ticklabels = ['0', '20', '30','40', '60', '61.9','80', '100']  # 与刻度位置对应的标签
ax2.set_xticks(x_ticks)
ax2.set_xticklabels(x_ticklabels)  
'''
# 显示图像
plt.show()
